@page "/building-display"
@rendermode InteractiveServer
@using DormitoryManagement.Data.Models
@inject FloorPlanService FloorPlanService

<div class="max-w-screen-sm mx-auto">
    @if (_isServerLoading)
    {
        <p>Loading..</p>
    }
    else
    {
        <div class="flex justify-between mb-10">
            @ReusableAssets.PageTitle("Floor Plan")
            <button class="base-button" @onclick="AddBuilding">New Building</button>
        </div>

        <section class="grid grid-cols-2 sm:grid-cols-3 gap-6 mb-12">
            @foreach (var building in _buildings)
            {
                <div class="w-52 h-auto text-sm font-medium text-gray-900 bg-white border border-gray-200 rounded-lg shadow-lg">
                    <div class="flex justify-between px-4 py-2 text-white bg-gray-800 border-b border-gray-200 rounded-t-lg">
                        @building.Name
                    </div>


                    @foreach (var floor in building.Floors)
                    {
                        <button @onclick="() => OnFloorClick(floor)" class="text-left block w-full px-4 py-2 border-b border-gray-200 cursor-pointer hover:bg-gray-100 text-gray-800">
                            Floor @floor.Number
                        </button>
                    }

                    <button @onclick="@(() => AddFloor(building.Id))" class="text-primary text-opacity-60 text-left block w-full px-4 py-2 border-b border-gray-200 cursor-pointer hover:bg-gray-100">
                        Add floor
                    </button>

                    <button @onclick="@(() => DeleteBuilding(building.Id))" class="text-red-700 text-opacity-60 text-left block w-full px-4 py-2 border-b border-gray-200 cursor-pointer hover:bg-gray-100">
                        Delete this building
                    </button>

                </div>
            }
        </section>


        @if (_selectedFloor is not null)
        {
            <section class="mb-12">
                <DisplayRooms Floor="_selectedFloor" OnAddNewRoom="@AddNewRoom"/>
            </section>
        }
    }
</div>

@code {

    private List<Building> _buildings = null!;
    private bool _isServerLoading;

    private Floor? _selectedFloor;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _isServerLoading = true;
        _buildings = await FloorPlanService.GetBuildings();
        _buildings = _buildings.OrderBy(b => b.Name).ToList();
        foreach (var building in _buildings)
        {
            building.Floors = building.Floors.OrderBy(f => f.Number).ToList();
        }

        _selectedFloor = null;
        _isServerLoading = false;
    }

    private void OnFloorClick(Floor floor)
    {
        _selectedFloor = floor;
    }

    private async Task AddBuilding()
    {
        await FloorPlanService.CreateBuilding();
        await LoadData();
    }

    private async Task DeleteBuilding(Guid buildingId)
    {
        await FloorPlanService.DeleteBuilding(buildingId);
        await LoadData();
    }

    private async Task AddFloor(Guid buildingId)
    {
        await FloorPlanService.CreateFloor(buildingId);
        await LoadData();
    }

    private async Task AddNewRoom(Guid floorId)
    {
        await FloorPlanService.CreateRoom(floorId);
        await LoadData();
        _selectedFloor = _buildings
            .SelectMany(b => b.Floors)
            .FirstOrDefault(f => f.Id == floorId);
    }

}