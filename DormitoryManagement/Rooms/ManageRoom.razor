@page "/room/{id:guid}"
@using DormitoryManagement.Data.Models
@attribute [StreamRendering]
@inject RoomService RoomService
@inject InventoryService InventoryService

@if (_isServerLoading)
{
    <p>Loading..</p>
}
else
{
    <div class="max-w-screen-md mx-auto">
        @ReusableAssets.PageTitle($"{_room.Floor.Building.Name} - {_room.Floor.Number} - {_room.Number}")

        <section class="mt-6 mb-16">
            @ReusableAssets.SubTitle(("Student management", "mb-2"))
            <p>Coming feature..</p>
        </section>


        <section class="mb-16">
            @ReusableAssets.SubTitle(("Inventory management", "mb-2"))

            <GenericTable Items="_inventoryItems"
                          Headers="@(new List<string> { "Name" })"
                          Fields="@(new List<Func<InventoryItem, object>> { p => p.Name })">
                
                <ActionTemplate Context="context">
                    <div class="flex justify-between">
                        <div>@GetActualQuantity(context)</div>
                        <div>@GetExpectedQuantity(context)</div>
                    </div>
                </ActionTemplate>
            </GenericTable>
        </section>

    </div>
}


@code {

    [Parameter, EditorRequired] public Guid Id { get; set; }

    private List<InventoryItem> _inventoryItems = [];
    private Room _room = null!;
    private bool _isServerLoading;

    protected override async Task OnInitializedAsync()
    {
        _isServerLoading = true;
        _room = await RoomService.GetRoomById(Id);
        _inventoryItems = await InventoryService.GetAllItems();
        _isServerLoading = false;
    }
    
    private int GetActualQuantity(InventoryItem item)
    {
        var roomInventory = _room.RoomInventories.FirstOrDefault(x => x.InventoryItemId == item.Id);
        return roomInventory?.ActualQuantity ?? 0;
    }
    
    private int GetExpectedQuantity(InventoryItem item)
    {
        var roomInventory = _room.RoomInventories.FirstOrDefault(x => x.InventoryItemId == item.Id);
        return roomInventory?.ExpectedQuantity ?? 0;
    }

}