@page "/inventory-display"
@attribute [StreamRendering]
@using DormitoryManagement.Data.Models
@inject InventoryService InventoryService

<div class="max-w-screen-sm mx-auto">
    @if (_isServerLoading)
    {
        <p>Loading..</p>
    }
    else
    {
        <div class="flex justify-between mb-10">
            @ReusableAssets.PageTitle("Inventory Items")
            <a class="base-button" href="/create-item">Add</a>
        </div>

        <div class="relative overflow-x-auto shadow-md sm:rounded-lg">
            <table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
                <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                    <tr>
                        <th scope="col" class="px-6 py-3">Nr</th>
                        <th scope="col" class="px-6 py-3">Name</th>
                        <th scope="col" class="px-6 py-3">Actions</th>
                    </tr>
                </thead>
                <tbody>
                     @{
                         var index = 0; // Variable to keep track of the index
                     }
                     
                     @foreach (var item in _inventoryItems)
                     {
                         <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
                             <td class="px-6 py-4"> @(++index) </td> <!-- Displaying the item number -->
                             <td class="px-6 py-4"> @item.Name </td> <!-- Displaying the item name -->
                             <td class="flex items-center px-6 py-4">
                                 <button class="font-medium text-blue-600 dark:text-blue-500 hover:underline" @onclick="@(() => EditItem(item))">Edit</button>
                                 <button class="font-medium text-red-600 dark:text-red-500 hover:underline ms-3" @onclick="@(() => DeleteItem(item))">Remove</button>
                             </td>
                         </tr>
                     }


                </tbody>
            </table>
        </div>
    }
</div>

@code {

    private List<InventoryItem> _inventoryItems = null!;
    private bool _isServerLoading;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _isServerLoading = true;
        _inventoryItems = await InventoryService.GetAllItems();
        _isServerLoading = false;
    }

   
    private Task EditItem(InventoryItem item)
    {
        return Task.CompletedTask;
        
    }

    private async Task DeleteItem(InventoryItem item)
    {   
        await InventoryService.DeleteInventory(item.Id);
        await LoadData();

    }
}
